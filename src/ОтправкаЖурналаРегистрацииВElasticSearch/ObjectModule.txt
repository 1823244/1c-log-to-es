
// Алгоритм работы следующий:
// 1. Подготовка к работе
// 1.1 Проверка переданных параметров
//     - Сервер Elasticsearch
//     - Порт Elasticsearch
//     - Разделение индексов по базам
//     - Имя базы для индекса. [Обязательно при разделении]
//     - Разделение индексов по периодам
//     - Периодичность индексов. По годам, по месяцам, по дням. [Обязательно при разделении]
//     - Отбор по дате начала.
//     - Отбор по дате окончания. При отсутствии будет выгружен за 1 день (берется первый).
//     - Максимальное количество записей в пакете. По умолчанию 0 (означает все).
//     - Очищать журнал регистрации при успешной выгрузке.
// 1.2 Проверка доступности Elasticsearch.
//     curl -XGET localhost:9200/_stats
// 1.3 Проверка существования шаблона 1c-eventlog. Создание шаблона при отсутствии
//     curl -XHEAD -i localhost:9200/_template/template_1
//     curl -XPUT localhost:9200/_template/template_1
// 2. Копирование журнала регистрации во временный каталог
// 3. Чтение копии журнала в таблицу значений
// 4. Отправка журнала регистрации в Elasticsearch
// 5. Удаление временных файлов
// 6. Перенос/удаление отправленных данных из журнала регистрации


Процедура ВыполнитьОтправкуЖурналаРегистрации()
	
	ДатаЖурналаРегистрации = ПолучитьДатуЖурналаРегистрации();
	
	Если ДатаЖурналаРегистрации = КонецДня(ТекущаяДата()) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьШаблонПриОтсутствии();
	ИмяФайлаКопииЖурнала = СкопироватьЖурналВоВременныйКаталог(КонецДня(ТекущаяДата()));
	
	ТаблицаЖурнала = ВыгрузитьЖурналИзФайла(ИмяФайлаКопииЖурнала);
	
	ОтправкаУспешна = ОтправитьЖурнал(ТаблицаЖурнала, ПолучитьСоединение());
	
	УдалитьФайлы(ИмяФайлаКопииЖурнала);
	
	//Если ОтправкаУспешна Тогда
	//	ОчиститьЖурналРегистрации(
	//		Новый Структура("ДатаОкончания", 
	//		ДатаЖурналаРегистрации)
	//	);
	//КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьШаблонПриОтсутствии()
	ИмяШаблона = "1c-eventlog";
	Соединение = ПолучитьСоединение();
	
	Сообщить("Проверка существования шаблона ""1c-eventlog"".");
	Если ШаблонСуществует(ИмяШаблона, Соединение) Тогда
		Сообщить("Шаблон найден.");
		Возврат;
	КонецЕсли;
	
	Сообщить("Шаблон отсутствует. Создание шаблона.");
	ОписаниеШаблона = ШаблонИндексаЖурналаРегистрации();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОписаниеШаблона);
	
	СериализованноеЗначение = ЗаписьJSON.Закрыть();

	СоздатьШаблон(ИмяШаблона, СериализованноеЗначение, Соединение);
	Сообщить("Шаблон создан успешно.");
КонецПроцедуры

Функция ШаблонИндексаЖурналаРегистрации()
	
	Шаблон = Новый Структура;
	Шаблон.Вставить("template", "1c-eventlog-*");
	Шаблон.Вставить("mappings", Новый Структура);
	
	СвойстваЗаписи = Новый Структура;
	СвойстваПолей  = Новый Структура;
	
	СвойстваПолей.Вставить("Дата",                    Новый Структура("type, format", "date", "yyyy-MM-dd'T'HH:mm:ss"));
	СвойстваПолей.Вставить("Пользователь",            Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ИмяПользователя",         Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Компьютер",               Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ИмяПриложения",           Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеПриложения", Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Сеанс",                   Новый Структура("type", "long"));
	СвойстваПолей.Вставить("Событие",                 Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеСобытия",    Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Комментарий",             Новый Структура("type", "string"));
	СвойстваПолей.Вставить("СтатусТранзакции",        Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Транзакция",              Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Метаданные",              Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеМетаданных", Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Данные",                  Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("ПредставлениеДанных",     Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Соединение",              Новый Структура("type", "long"));
	СвойстваПолей.Вставить("ОсновнойIPПорт",          Новый Структура("type", "long"));
	СвойстваПолей.Вставить("ВспомогательныйIPПорт",   Новый Структура("type", "long"));
	СвойстваПолей.Вставить("РабочийСервер",           Новый Структура("type, index", "string", "not_analyzed"));
	СвойстваПолей.Вставить("Уровень",                 Новый Структура("type, index", "string", "not_analyzed"));
		
	СвойстваЗаписи.Вставить("properties", СвойстваПолей);
	Шаблон.mappings.Вставить("record", СвойстваЗаписи);
	
	Возврат Шаблон;
	
КонецФункции

#Область Вспомогательные_процедуры

Функция ПолучитьДатуЖурналаРегистрации()
	ДатаЖурнала = КонецДня(ТекущаяДата());
	
	ТаблицаЖурнала = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ТаблицаЖурнала, , "Дата");
	
	Если ЗначениеЗаполнено(ТаблицаЖурнала) Тогда
		ДатаЖурнала = КонецДня(ТаблицаЖурнала[0].Дата);
	КонецЕсли;
	
	Возврат ДатаЖурнала;	
КонецФункции

Функция СкопироватьЖурналВоВременныйКаталог(ДатаЖурнала)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("lgd");
	
	СкопироватьЖурналРегистрации(, ИмяВременногоФайла, Новый Структура("ДатаОкончания", ДатаЖурнала));
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Функция ВыгрузитьЖурналИзФайла(ИмяФайла)
	ТаблицаЖурнала = Новый ТаблицаЗначений();
	ВыгрузитьЖурналРегистрации(ТаблицаЖурнала, , , ИмяФайла);
	
	Возврат ТаблицаЖурнала;
КонецФункции

Функция ОтправитьЖурнал(ТаблицаЖурнала, ПараметрыПодключения)
	РезультатОтправки = Истина;
	
	Для Каждого СтрокаЖурнала Из ТаблицаЖурнала Цикл
		СтрокаТелоЗапроса = СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала);
		ИмяИндекса = "/1c-eventlog-" + Формат(СтрокаЖурнала.Дата, "ДФ=yyyy-MM") + "/record/";
		РезультатОперации = 
			ВыполнитьОтправкуПоHTTP(
				ИмяИндекса,
				СтрокаТелоЗапроса, 
				ПараметрыПодключения
			);		
		РезультатОтправки = РезультатОтправки И РезультатОперации;
	КонецЦикла;
	
	Возврат РезультатОтправки;
КонецФункции

Функция СформироватьТелоЗапросаПоСтрокеЖурнала(СтрокаЖурнала)
	ДанныеСтроки = ПолучитьСтруктуруИзДанныхСтроки(СтрокаЖурнала);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеСтроки);
	
	СериализованноеЗначение = ЗаписьJSON.Закрыть();
	
	Возврат СериализованноеЗначение;
КонецФункции

Функция ВыполнитьОтправкуПоHTTP(АдресРесурса, СтрокаТелоЗапроса, Соединение)
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, , ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	
	Сообщить(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Возврат HTTPОтвет.КодСостояния = 201;	
КонецФункции

Функция ПолучитьСтруктуруИзДанныхСтроки(СтрокаЖурнала)
	Колонки = СтрокаЖурнала.Владелец().Колонки;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		ИмяПоля = Колонка.Имя;
		ЗначениеПоля = СтрокаЖурнала[ИмяПоля];
				
		Если ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
			Для Каждого ПолеСтруктуры Из ЗначениеПоля Цикл
				ДанныеСтроки.Вставить(
					ИмяПоля + "_" + ПолеСтруктуры.Ключ, 
					ПолеСтруктуры.Значение
				);
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
			ДанныеСтроки.Вставить(Колонка.Имя, Формат(ЗначениеПоля, "ДФ='гггг-ММ-дд""T""ЧЧ:мм:сс'"));
		Иначе
			ДанныеСтроки.Вставить(Колонка.Имя, Строка(ЗначениеПоля));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеСтроки;
КонецФункции

Функция ПолучитьСоединение()
	ПараметрыПодключения = Новый Структура("Сервер, Порт", "10.211.55.11", 9200);
			
	Соединение = 
		Новый HTTPСоединение(
			ПараметрыПодключения.Сервер, 
			ПараметрыПодключения.Порт
		);
	
	Возврат Соединение;
КонецФункции

#КонецОбласти

#Область ES_API

Функция ИндексСуществует(ИмяИндекса, Соединение)
	HTTPЗапрос = Новый HTTPЗапрос(ИмяИндекса);
	Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
	
	Возврат Ответ.КодСостояния = 200;
КонецФункции

Функция УдалитьИндекс(ИмяИндекса, Соединение)
	HTTPЗапрос = Новый HTTPЗапрос(ИмяИндекса);
	Ответ = Соединение.Удалить(HTTPЗапрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция СоздатьИндекс(ИмяИндекса, Соединение)
	
КонецФункции

// curl -XHEAD -i localhost:9200/_template/template_1
Функция ШаблонСуществует(ИмяШаблона, Соединение)
	HTTPЗапрос = Новый HTTPЗапрос("/_template/" + ИмяШаблона);
	Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
	
	Возврат Ответ.КодСостояния = 200;
КонецФункции

Функция СоздатьШаблон(ИмяШаблона, СтрокаОписаниеШаблона, Соединение)
	HTTPЗапрос = Новый HTTPЗапрос("/_template/" + ИмяШаблона);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаОписаниеШаблона, , ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = Соединение.Записать(HTTPЗапрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

ВыполнитьОтправкуЖурналаРегистрации();